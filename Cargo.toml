[package]
name = "dinari_blockchain"
version = "0.1.0"
edition = "2021"
authors = ["DinariBlockchain Team"]
description = "A Proof of Authority blockchain built for African financial empowerment, enabling stable digital payments, remittances, and economic participation through DINARI and AFRICOIN tokens with algorithmic USD pegging"
license = "MIT"
repository = "https://github.com/dinari/dinari-blockchain"
keywords = ["blockchain", "cryptocurrency", "peg", "stablecoin", "rust"]
categories = ["cryptography", "finance"]

[dependencies]
# Async runtime
tokio = { version = "1.0", features = ["full"] }

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
bincode = "1.3"

# Database
rocksdb = "0.21"

# Cryptography
secp256k1 = { version = "0.27", features = ["recovery", "rand"] }
sha2 = "0.10"
blake3 = "1.4"  # Used in peg.rs for transaction hashing
hex = "0.4"
bs58 = "0.4"    # For address encoding
rand = "0.8"

# Time handling
chrono = { version = "0.4", features = ["serde"] }

# Error handling
anyhow = "1.0"

# Logging
log = "0.4"
env_logger = "0.10"

# UUID generation for transaction IDs
uuid = { version = "1.0", features = ["v4"] }

# HTTP server for RPC
hyper = { version = "0.14", features = ["full"] }

# CLI dependencies (ADDED THESE)
clap = { version = "4.0", features = ["derive"] }
reqwest = { version = "0.11", features = ["json"] }
dirs = "5.0"

# Collections for peg mechanism
# (std::collections is built-in, no external dependency needed)

[dev-dependencies]
# Testing
tempfile = "3.0"  # For temporary directories in tests

[profile.release]
# Optimizations for production builds
opt-level = 3
lto = true
codegen-units = 1
panic = "abort"

[profile.dev]
# Development optimizations
opt-level = 0
debug = true

[[bin]]
name = "dinari_blockchain"
path = "src/main.rs"

[[bin]]
name = "dinari_cli"
path = "src/bin/dinari_cli.rs"

[features]
default = ["peg", "treasury", "rpc"]

# Feature flags
peg = []          # Algorithmic USD peg system
treasury = []     # Treasury and minting system  
rpc = []          # JSON-RPC server
testing = []      # Additional testing utilities

[package.metadata.docs.rs]
# Documentation configuration
all-features = true
rustdoc-args = ["--cfg", "docsrs"]